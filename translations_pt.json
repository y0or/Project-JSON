{
  "JSON: Concepts, Examples, and Applications": "JSON: Conceitos, Exemplos e Aplica√ß√µes",
  "üåê Traduzir": "üåê Translate",
  "Article byy0or": "",
  "y0or": "",
  "What is JSON?": "O que √© JSON?",
  "Basic Structure": "Estrutura B√°sica",
  "Practical Examples": "Exemplos Pr√°ticos",
  "Real-world Applications": "Aplica√ß√µes Reais",
  "Challenges": "Desafios",
  "üìå What is JSON?": "üìå O que √© JSON?",
  "JSON(JavaScript Object Notation) is a lightweight text format used to store and exchange data. It‚Äôs widely used in web applications to send and receive information between client and server.": "",
  "JSON": "",
  "It‚Äôs like a simple way to write objects, lists, and information in an organized and readable way, both for humans and machines.": "√â como uma forma simples de escrever objetos, listas e informa√ß√µes de forma organizada e leg√≠vel, tanto para humanos quanto para m√°quinas.",
  "üèóÔ∏è Basic Structure of JSON": "üèóÔ∏è Estrutura B√°sica do JSON",
  "Copy": "Copiar",
  "{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"active\": true,\n  \"skills\": [\"HTML\", \"CSS\", \"JavaScript\"]\n}": "",
  "Strings: Enclosed in double quotes (\"text\")": "Strings: Entre aspas duplas (\"texto\")",
  "Strings": "",
  "Numbers: Just numbers, no quotes": "N√∫meros: Apenas n√∫meros, sem aspas",
  "Numbers": "",
  "Booleans:trueorfalse": "",
  "Booleans": "",
  "true": "",
  "false": "",
  "Arrays: List of values inside brackets [ ]": "Arrays: Lista de valores entre colchetes [ ]",
  "Arrays": "",
  "Objects: Structures inside braces { }": "Objetos: Estruturas entre chaves { }",
  "Objects": "",
  "üíª Practical Examples": "üíª Exemplos Pr√°ticos",
  "1. Creating and displaying JSON in Node.js": "1. Criando e exibindo JSON no Node.js",
  "// Create an object with data\nconst student = {\n  name: \"Lucas\",\n  age: 20,\n  course: \"IT\"\n};\n\nconsole.log(\"Object:\");\nconsole.log(student);\n\nconsole.log(\"Converted to JSON:\");\nconsole.log(JSON.stringify(student, null, 2));": "",
  "2. Reading JSON data (e.g. from an API)": "2. Lendo dados JSON (ex: de uma API)",
  "const jsonReceived = '{\"name\":\"Ana\",\"age\":22}';\nconst obj = JSON.parse(jsonReceived);\nconsole.log(obj.name); // Ana": "",
  "3. Interactive examples in Node.js with JSON": "3. Exemplos interativos em Node.js com JSON",
  "Example 3.1: Creating an object and converting to JSON": "Exemplo 3.1: Criando um objeto e convertendo para JSON",
  "const user = {\n  name: \"Mariana\",\n  age: 27,\n  active: true,\n  interests: [\"music\", \"sports\", \"reading\"]\n};\n\nconst jsonText = JSON.stringify(user, null, 2);\nconsole.log(\"JavaScript Object:\");\nconsole.log(user);\n\nconsole.log(\"\\nConverted to JSON:\");\nconsole.log(jsonText);": "",
  "Explanation:We useJSON.stringifyto convert the JS object to formatted JSON text.": "",
  "Explanation:": "",
  "JSON.stringify": "",
  "Example 3.2: Converting JSON to object and accessing data": "Exemplo 3.2: Convertendo JSON para objeto e acessando dados",
  "const jsonData = '{\"product\":\"Book\",\"price\":29.9,\"available\":true}';\nconst product = JSON.parse(jsonData);\n\nconsole.log(\"Product name:\", product.product);\nconsole.log(\"Price:\", product.price);\nconsole.log(\"Available?\", product.available);": "",
  "Explanation:UsingJSON.parsewe convert JSON text into a JS object to access the data.": "",
  "JSON.parse": "",
  "Example 3.3: Simulating a mini JSON database": "Exemplo 3.3: Simulando um mini banco de dados JSON",
  "const users = [\n  { id: 1, name: \"Lucas\", active: true },\n  { id: 2, name: \"Ana\", active: false },\n  { id: 3, name: \"Pedro\", active: true }\n];\n\nconst jsonUsers = JSON.stringify(users, null, 2);\nconsole.log(\"List of users in JSON format:\");\nconsole.log(jsonUsers);\n\nconst usersObj = JSON.parse(jsonUsers);\nconst activeUsers = usersObj.filter(u => u.active);\n\nconsole.log(\"\\nActive users:\");\nconsole.table(activeUsers);": "",
  "Explanation:Shows how JSON can represent complex lists and usesconsole.tableto display data.": "",
  "console.table": "",
  "Example 4: Nested JSON with address": "Exemplo 4: JSON aninhado com endere√ßo",
  "const person = {\n  name: \"Pedro\",\n  age: 30,\n  address: {\n    street: \"Av. Brasil\",\n    number: 100,\n    city: \"Rio de Janeiro\",\n    state: \"RJ\",\n    zipcode: \"20000-000\"\n  }\n};\n\nconsole.log(JSON.stringify(person, null, 2));": "",
  "Explanation:This example shows how JSON can represent objects inside objects (nested data).": "",
  "Example 5: Filtering a list of JSON objects": "Exemplo 5: Filtrando uma lista de objetos JSON",
  "const products = [\n  { id: 1, name: \"Pen\", price: 1.2, inStock: true },\n  { id: 2, name: \"Notebook\", price: 4.5, inStock: false },\n  { id: 3, name: \"Pencil\", price: 0.8, inStock: true }\n];\n\nconst availableProducts = products.filter(p => p.inStock);\n\nconsole.log(JSON.stringify(availableProducts, null, 2));": "",
  "Explanation:Filters a JSON array to get only products that are in stock.": "",
  "Example 6: JSON configuration file": "Exemplo 6: Arquivo de configura√ß√£o JSON",
  "{\n  \"appName\": \"MyApp\",\n  \"version\": \"1.0.0\",\n  \"features\": {\n    \"login\": true,\n    \"signup\": false,\n    \"darkMode\": true\n  },\n  \"maxUsers\": 1000\n}": "",
  "Explanation:Common use of JSON to store application configuration.": "",
  "Example 7: JSON movie data": "Exemplo 7: Dados de filme em JSON",
  "{\n  \"title\": \"Inception\",\n  \"director\": \"Christopher Nolan\",\n  \"year\": 2010,\n  \"genres\": [\"Action\", \"Sci-Fi\", \"Thriller\"],\n  \"ratings\": {\n    \"IMDB\": 8.8,\n    \"RottenTomatoes\": 87\n  }\n}": "",
  "Explanation:Example of how movie details can be represented in JSON, similar to API responses.": "",
  "Example 8: User preferences JSON": "Exemplo 8: Prefer√™ncias de usu√°rio em JSON",
  "{\n  \"userId\": 12345,\n  \"theme\": \"dark\",\n  \"notifications\": {\n    \"email\": true,\n    \"sms\": false,\n    \"push\": true\n  },\n  \"language\": \"en\"\n}": "",
  "Explanation:Represents user preferences and settings.": "",
  "Example 9: Book Data": "Exemplo 9: Dados do Livro",
  "{\n  \"title\": \"Dom Casmurro\",\n  \"author\": \"Machado de Assis\",\n  \"year\": 1899,\n  \"genres\": [\"Romance\", \"Brazilian Literature\"],\n  \"available\": true\n}": "{\n  \"title\": \"Dom Casmurro\",\n  \"author\": \"Machado de Assis\",\n  \"year\": 1899,\n  \"genres\": [\"Romance\", \"Brazilian Literature\"],\n  \"available\": true\n}",
  "Explanation: Represents book data with title, author, year, genres (array), and availability (boolean).": "Explica√ß√£o: Representa dados de livro com t√≠tulo, autor, ano, g√™neros (array) e disponibilidade (boolean).",
  "Example 10: Weather Information": "Exemplo 10: Informa√ß√µes do Tempo",
  "{\n  \"city\": \"S√£o Paulo\",\n  \"temperature\": 23,\n  \"condition\": \"Cloudy\",\n  \"precipitation_mm\": 0,\n  \"wind\": {\n    \"speed_kmh\": 15,\n    \"direction\": \"Northwest\"\n  }\n}": "{\n  \"city\": \"S√£o Paulo\",\n  \"temperature\": 23,\n  \"condition\": \"Cloudy\",\n  \"precipitation_mm\": 0,\n  \"wind\": {\n    \"speed_kmh\": 15,\n    \"direction\": \"Northwest\"\n  }\n}",
  "Explanation: Weather data including temperature, condition, precipitation, and nested wind object.": "Explica√ß√£o: Dados do tempo incluindo temperatura, condi√ß√£o, precipita√ß√£o e objeto aninhado vento.",
  "Example 11: Music App Settings": "Exemplo 11: Configura√ß√µes do App de M√∫sica",
  "{\n  \"user\": \"maria123\",\n  \"favoritePlaylist\": \"Top Hits 2025\",\n  \"audioQuality\": \"High\",\n  \"notifications\": {\n    \"email\": false,\n    \"push\": true\n  }\n}": "{\n  \"user\": \"maria123\",\n  \"favoritePlaylist\": \"Top Hits 2025\",\n  \"audioQuality\": \"High\",\n  \"notifications\": {\n    \"email\": false,\n    \"push\": true\n  }\n}",
  "Explanation: User preferences in a music app, showing strings, booleans, and nested objects.": "Explica√ß√£o: Prefer√™ncias do usu√°rio em um app de m√∫sica, mostrando strings, booleanos e objetos aninhados.",
  "Example 12: Class Schedule Table": "Exemplo 12: Tabela de Hor√°rios das Aulas",
  "{\n  \"schedules\": [\n    {\"day\": \"Monday\", \"subject\": \"Math\", \"start\": \"08:00\", \"end\": \"09:30\"},\n    {\"day\": \"Wednesday\", \"subject\": \"History\", \"start\": \"10:00\", \"end\": \"11:30\"},\n    {\"day\": \"Friday\", \"subject\": \"Chemistry\", \"start\": \"13:00\", \"end\": \"14:30\"}\n  ]\n}": "{\n  \"schedules\": [\n    {\"day\": \"Monday\", \"subject\": \"Math\", \"start\": \"08:00\", \"end\": \"09:30\"},\n    {\"day\": \"Wednesday\", \"subject\": \"History\", \"start\": \"10:00\", \"end\": \"11:30\"},\n    {\"day\": \"Friday\", \"subject\": \"Chemistry\", \"start\": \"13:00\", \"end\": \"14:30\"}\n  ]\n}",
  "Explanation: List of class schedule objects with day, subject, and time.": "Explica√ß√£o: Lista de objetos com hor√°rios das aulas, incluindo dia, disciplina e hor√°rio.",
  "Example 13: Signup Form Data": "Exemplo 13: Dados do Formul√°rio de Cadastro",
  "{\n  \"name\": \"Pedro Silva\",\n  \"email\": \"pedro@email.com\",\n  \"phone\": \"+551199999999\",\n  \"newsletter\": true\n}": "{\n  \"name\": \"Pedro Silva\",\n  \"email\": \"pedro@email.com\",\n  \"phone\": \"+551199999999\",\n  \"newsletter\": true\n}",
  "Explanation: Basic signup form info with text and a boolean for newsletter subscription.": "Explica√ß√£o: Informa√ß√µes b√°sicas de um formul√°rio de cadastro com texto e booleano para assinatura de newsletter.",
  "üåê Real-world Applications of JSON": "üåê Aplica√ß√µes Reais do JSON",
  "üì°APIs:Communication between websites and services": "",
  "APIs:": "",
  "üíæConfigurations:Files likepackage.json": "",
  "Configurations:": "",
  "package.json": "",
  "üß™Testing:Generate fake data for simulations": "",
  "Testing:": "",
  "üì±Mobile Apps:Sending data to servers": "",
  "Mobile Apps:": "",
  "üåê Example usage with API using fetch": "üåê Exemplo de uso com API usando fetch",
  "The fetch() function is used to get data from an API (a web server).": "A fun√ß√£o fetch() √© usada para buscar dados de uma API (um servidor na internet).",
  "When the data arrives, we convert it from JSON text to a usable object using .json().": "Quando os dados chegam, usamos .json() para converter o texto JSON em um objeto JavaScript que podemos usar.",
  "fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) // Converts the response text into a JavaScript object\n  .then(data => {\n    console.log(\"Users from API:\");\n    console.table(data); // Shows the user list in table format in the console\n  });": "fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(res => res.json()) // Converte o texto da resposta para objeto JS\n  .then(data => {\n    console.log(\"Usu√°rios da API:\");\n    console.table(data); // Mostra os dados como uma tabela no console\n  });",
  "Example:": "Exemplo:",
  "fetch(url): Sends a request to the URL.": "fetch(url): Envia uma requisi√ß√£o para o endere√ßo da API.",
  ".then(res => res.json()): Converts the response (which is in JSON format) into an object.": ".then(res => res.json()): Converte a resposta (que est√° em texto JSON) em um objeto.",
  ".then(data => ...): This is where you can use the data received.": ".then(data => ...): Aqui usamos os dados recebidos.",
  "‚úÖ This only works in browsers, because it needs internet access to contact the API.": "‚úÖ Isso s√≥ funciona em navegadores, pois depende de acesso √† internet para buscar os dados da API.",
  "üß† Challenges to Practice": "üß† Desafios para Praticar",
  "‚úÖ Create an object with your data (name, age, course, etc.) and convert to JSON.": "‚úÖ Crie um objeto com seus dados (nome, idade, curso, etc.) e converta para JSON.",
  "‚úÖ Simulate receiving a JSON text and convert to object withJSON.parse.": "",
  "‚úÖ Create an array of objects with 3 different students and useconsole.tableto visualize.": "",
  "Article byy0or‚Äì IFC Project": "",
  "Article by": "Artigo por",
  "JSON (JavaScript Object Notation) is a lightweight text format used to store and exchange data. It‚Äôs widely used in web applications to send and receive information between client and server.": "JSON (JavaScript Object Notation) √© um formato leve de texto usado para armazenar e trocar dados. √â amplamente utilizado em aplica√ß√µes web para enviar e receber informa√ß√µes entre cliente e servidor.",
  "View": "Visualizar",
  "Explanation": "Explica√ß√£o",
  "Booleans: true or false": "Booleanos: true ou false",
  "JavaScript Object:": "Objeto JavaScript:",
  "Converted to JSON:": "Convertido para JSON:",
  "Explanation: We use JSON.stringify to convert the JS object to formatted JSON text.": "Explica√ß√£o: Usamos JSON.stringify para converter o objeto JS em texto JSON formatado.",
  "Product name:": "Nome do produto:",
  "Price:": "Pre√ßo:",
  "Available?": "Dispon√≠vel?",
  "Explanation: Using JSON.parse we convert JSON text into a JS object to access the data.": "Explica√ß√£o: Usando JSON.parse, convertendo o texto JSON para um objeto JS para acessar os dados.",
  "List of users in JSON format:": "Lista de usu√°rios em formato JSON:",
  "Active users:": "Usu√°rios ativos:",
  "Explanation: Shows how JSON can represent complex lists and uses console.table to display data.": "Explica√ß√£o: Mostra como o JSON pode representar listas complexas e usa console.table para exibir os dados.",
  "Explanation: This example shows how JSON can represent objects inside objects (nested data).": "Explica√ß√£o: Este exemplo mostra como o JSON pode representar objetos dentro de objetos (dados aninhados).",
  "Explanation: Filters a JSON array to get only products that are in stock.": "Explica√ß√£o: Filtra um array JSON para obter apenas os produtos em estoque.",
  "Explanation: Common use of JSON to store application configuration.": "Explica√ß√£o: Uso comum do JSON para armazenar configura√ß√µes de uma aplica√ß√£o.",
  "Explanation: Example of how movie details can be represented in JSON, similar to API responses.": "Explica√ß√£o: Exemplo de como detalhes de filmes podem ser representados em JSON, semelhante a respostas de API.",
  "Explanation: Represents user preferences and settings.": "Explica√ß√£o: Representa prefer√™ncias e configura√ß√µes de usu√°rio.",
  "APIs: Communication between websites and services": "APIs: Comunica√ß√£o entre sites e servi√ßos",
  "Configurations: Files like package.json": "Configura√ß√µes: Arquivos como package.json",
  "Testing: Generate fake data for simulations": "Testes: Gerar dados falsos para simula√ß√µes",
  "Mobile Apps: Sending data to servers": "Apps m√≥veis: Envio de dados para servidores",
  "‚úÖ Simulate receiving a JSON text and convert to object with JSON.parse.": "‚úÖ Simule o recebimento de um texto JSON e converta para objeto com JSON.parse.",
  "‚úÖ Create an array of objects with 3 different students and use console.table to visualize.": "‚úÖ Crie um array de objetos com 3 alunos diferentes e use console.table para visualizar.",
  "Copied!": "Copiado!",
  "‚Äì IFC Project": "‚Äì Projeto do IFC"
}